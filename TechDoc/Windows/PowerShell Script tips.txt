================================================================================
PowerShell
================================================================================
To enable running ps1 file.

> Set-ExecutionPolicy RemoteSigned
================================================================================
Run script outside PowerShell.

> PowerShell -File <Path_To_ps1_File> <InputParameters>

If not exist PowerShell after script completed.

> PowerShell -NoExit -File <Path_To_ps1_File> <InputParameters>
------------------------------------------------------------
Run script inside PowerShell.

> <Path_To_ps1_File> <InputParameters>
================================================================================
Source functions in a script

> . <FunctionsFile.ps1>
------------------------------------------------------------
Check imported functions.

> Get-ChildItem Function:\ | Format-Table -Property Name, Definition
================================================================================
Set-PSDebug

Options:
-Off [<SwitchParameter>]: Indicates that this cmdlet turns off all script debugging features.
-Step [<SwitchParameter>]: Indicates that this cmdlet turns on script stepping. Before each line runs, Windows PowerShell prompts you to stop, continue, or enter a new interpreter level to inspect the state of the script.
-Strict [<SwitchParameter>] : Indicates that Windows PowerShell returns an exception if a variable is referenced before a value is assigned to the variable.
-Trace <Int32>: Specifies the trace level. The acceptable values for this parameter are:
                - 0: Turn script tracing off.
                - 1: Trace script lines as they run.
                - 2: Trace script lines, variable assignments, function calls, and scripts.

> Set-PSDebug -Trace 1
------------------------------------------------------------
Set-StrictMode
(It is local/child scope, while "Set-PSDebug -Strict" is global scope.)

The Set-StrictMode cmdlet configures strict mode for the current scope and all child scopes, and turns it on and off. When strict mode is on, Windows PowerShell generates a terminating error when the content of an expression, script, or script block violates basic best-practice coding rules.

Unlike the Set-PSDebug cmdlet, Set-StrictMode affects only the current scope and its child scopes. Therefore, you can use it in a script or function without affecting the global scope.

Options:
-Off: Indicates that this cmdlet turns strict mode off. This parameter also turns off `Set-PSDebug -Strict`.
-Version <Version>: Specifies the conditions that cause an error in strict mode.
                    1.0: Prohibits references to uninitialized variables, except for uninitialized variables in strings.
                    2.0: Prohibits references to uninitialized variables. This includes uninitialized variables in strings.
                         Prohibits references to non-existent properties of an object.
                         Prohibits function calls that use the syntax for calling methods.
                         Prohibits a variable without a name (${}).
                    Latest: Selects the latest version available. The latest version is the most strict. Use this value to make sure that scripts use the strictest available version, even when new versions are added to Windows PowerShell.

> Set-StrictMode -Version 1
------------------------------------------------------------
Set-PSBreakpoint
Get-PSBreakpoint
Disable-PSBreakpoint
Enable-PSBreakpoint
Remove-PSBreakpoint
Get-PSCallStack
================================================================================
Condition.
------------------------------------------------------------
If (Test-Path CakeList.txt) {"Exist."} Else {"Not exist!"}
If (Test-Path DishList.txt) {"Exist."} Else {"Not exist!"}
================================================================================
"WScript.Shell" is a COM defined in "HKEY_CLASSES_ROOT\WScript.Shell".

> $wshShell = New-Object -ComObject "WScript.Shell"
> $wshShell.Run("Calc.exe")
> $wshShell.ExpandEnvironmentStrings("%windir%")
> $wshShell.Popup("Hello World!")
------------------------------------------------------------
"WScript.Network" is a COM defined in "HKEY_CLASSES_ROOT\WScript.Network".

> $wshNetwork = New-Object -ComObject "WScript.Network"
> $wshNetwork.ComputerName
> $wshNetwork.UserName
> $wshNetwork.EnumPrinterConnections()
================================================================================
Call class and method.

> [System.Environment]::OSVersion
> [Io.Path]::GetRandomFileName()
================================================================================
