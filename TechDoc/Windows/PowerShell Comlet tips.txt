================================================================================
PowerShell
================================================================================
Download more help content.
Run as PowerShell admin.

Check what will download.

> Update-Help -Module * -WhatIf

Download.

> Update-Help -Module * -Force

Download and hide error (for those not support download).

> Update-Help -Module * -Force -ErrorAction 0
------------------------------------------------------------
Get help.

> Get-Help

> Get-Help Get-Help
------------------------------------------------------------
Get help for a Cmdlet and with more info.

> Get-Help <Cmdlet>

> Get-Help <Cmdlet> -Detailed

> Get-Help <Cmdlet> -Full

> Get-Help <Cmdlet> -Examples

Open a browser and get help online.

> Get-Help <Cmdlet> -Online
------------------------------------------------------------
Get a list of support Cmdlets with wildcard.

> Get-Help *

> Get-Help <PatialCmdletName_WithWildcard>
------------------------------------------------------------
Get alias.

> Get-Alias
> Get-Alias <PatialAliasName_WithWildcard>
> Get-Alias -Definition <PatialCmdletName_WithWildcard>
> gal
------------------------------------------------------------
Set a alias.

> New-Alias <AliasName> <CmdletName>
> New-Alias <AliasName> <ValueString>
================================================================================
Useful common parameters
------------------------------------------------------------
-WhatIf : Test/WhyRun mode.
-Confirm : To prompt before executing. [Yes, Yes to All, No, No to All, Suspend]
-Verbose : Provide more details.
-Debug : Provide debug info.
-ErrorAction : Perform certain action when there is an error. [Continue, Ignore, Inquire, SilentlyContinue, Stop, Suspend]
-ErrorVariable : Save error info into a specific variable, other than standard $Error variable.
-OutputVariable : Save output info into a specific variable.
================================================================================
List all verb for Cmdlet.

> Get-Verb
> (Get-Verb).Count
------------------------------------------------------------
List all alias, Cmdlets, function, application.

> Get-Command
> Get-Command <PatialName_WithWildcard>

List all matching verb (The part before dash of Cmdlet).

> Get-Command -Verb <PatialVerb_WithWildcard>

List all matching noun (The part after dash of Cmdlet).

> Get-Command -Noun <PatialNoun_WithWildcard>
------------------------------------------------------------
List all member of a Cmdlet.

Options:
-MemberType <PSMemberTypes> : Specifies the member type that this cmdlet gets. The default is All.
            [AliasProperty, CodeProperty, Property, NoteProperty, ScriptProperty, Properties, PropertySet, Method, CodeMethod,  ScriptMethod, Methods, ParameterizedProperty, MemberSet, Event, Dynamic, All]

> Get-Member -InputObject <Cmdlet>

> Get-Member -InputObject Get-Alias
> Get-Member -InputObject Get-ChildItem
------------------------------------------------------------
List all member of current item.

> <Cmdlet> | Get-Member
> <Cmdlet> | Get-Member -MemberType <PSMemberTypes>

> Get-Alias | Get-Member
> Get-ChildItem | Get-Member
------------------------------------------------------------
Show Cmdlet list in a pop up window (default 600 x 300).
Choose a Cmdlet and set options.

> Show-Command
> Show-Command -Height 400 -Width 500

Show one Cmdlet in a pop up window.

> Show-Command -Name <CmdletName>
================================================================================
Clean screen.

> Clear-Host
> cls
------------------------------------------------------------
Save console output to a file.

Options:
-Append : Indicates that this cmdlet adds the new transcript to the end of an existing file. Use the Path parameter to specify the file.
-OutputDirectory <String> : Specifies a specific path and folder in which to save a transcript. Windows PowerShell automatically assigns the transcript name.
-Path <String> : Specifies a location to the transcript file. Enter a path to a .txt file. Wildcards are not permitted.

> Start-Transcript

Transcript started, output file is C:\Users\xx\Documents\PowerShell_transcript.yy.zz.txt

> Stop-Transcript

Transcript stopped, output file is C:\Users\xx\Documents\PowerShell_transcript.yy.zz.txt
------------------------------------------------------------
Output text to screen.

Options:
-BackgroundColor <ConsoleColor> : Specifies the background color. There is no default. The acceptable values for this parameter are: [Black, DarkBlue, DarkGreen, DarkCyan, DarkRed, DarkMagenta, DarkYellow, Gray, DarkGray, Blue, Green, Cyan, Red, Magenta, Yellow, White].
-ForegroundColor <ConsoleColor> : Specifies the text color. There is no default. The acceptable values for this parameter are: [Black, DarkBlue, DarkGreen, DarkCyan, DarkRed, DarkMagenta, DarkYellow, Gray, DarkGray, Blue, Green, Cyan, Red, Magenta, Yellow, White].
-NoNewline : Specifies that the content displayed in the console does not end with a newline character.
-Separator <Object> : Specifies a separator string to the output between objects displayed on the console.

> Write-Host "Hello, World!" -BackgroundColor Yellow -ForegroundColor Blue
> Write-Host ("Hello", "World", "Tom", "Cat") -Separator "<->"
> Write-Host (10, 8, 6, 4) -Separator " > "
------------------------------------------------------------
Output text to file.

Options:
-Append : Indicates that the cmdlet adds the output to the end of an existing file, instead of replacing the file contents.
-Encoding <String> : Specifies the type of character encoding used in the file. The acceptable values for this parameter are: [Unknown, String, Unicode, BigEndianUnicode, UTF8, UTF7, UTF32, ASCII, Default, OEM].
          "Unicode" is the default. "Default" uses the encoding of the system's current ANSI code page. "OEM" uses the current original equipment manufacturer code page identifier for the operating system.
-InputObject <PSObject> : Specifies the objects to be written to the file. Enter a variable that contains the objects or type a command or expression that gets the objects.
-NoClobber : Indicates that the cmdlet will not overwrite an existing file. By default, if a file exists in the specified path, Out-File overwrites the file without warning. If both Append and NoClobber are used, the output is appended to the existing file.
-NoNewline

> Out-File Hello.txt -InputObject "Hello, World!"
> Get-Process | Out-File Process.txt
================================================================================
Get drive list.

> Get-PSDrive
> Get-PSDrive | Format-Table -AutoSize
------------------------------------------------------------
Test path's existence.

> Test-Path <Path>
------------------------------------------------------------
Change path.

Path could be PSProvider, PSDrvier, file path, etc.

> Set-Location <Path>
> cd <Path>
------------------------------------------------------------
Push / Pop current working location.

> Push-Location
> Pop-Location
------------------------------------------------------------
List content of location.

Path could be PSProvider, PSDrvier, file path, etc.

Options:
-Recurse : Recurse the sub-folders.
-Include <PatternWildcard> : Filter to include.
-Exclude <PatternWildcard> : Filter to exclude.

> Get-ChildItem
> dir

> Get-ChildItem <Path>
> Get-ChildItem -Path <Path>

> Get-ChildItem -Recurse
> Get-ChildItem -Recurse -Include *.txt
> Get-ChildItem -Recurse -Exclude *.txt

Find file only.

> Get-ChildItem -File
> Get-ChildItem | Where {!$_.PSIsContainer}

Find directory only.

> Get-ChildItem -Directory
> Get-ChildItem | Where PSIsContainer
------------------------------------------------------------
General purpose item actions.

> Get-Item
> New-Item
> Rename-Item
> Remove-Item
> Set-Item

> Get-ItemProperty
> Set-ItemProperty
================================================================================
Format list.
Convert each row of result into a small list.

Options:
-GroupBy <Object> : Specifies the output in groups based on a shared property or value. Enter an expression or a property of the output.
-Property : One or more fields.

> Get-ChildItem | Format-List
> Get-ChildItem | Format-List -Property Name, Length
> Get-ChildItem | Format-List -Property Name, Length -GroupBy Length

> Get-Process | Format-List
> Get-Process | Format-List -Property Id, Name
------------------------------------------------------------
Format wide.
Convert each row of result into a single field.

Options:
-AutoSize : Indicates that this cmdlet adjusts the column size and number of columns based on the width of the data.
-Column <Int32> : Specifies the number of columns in the display. The default value is 2.
-GroupBy <Object> : Specifies the output in groups based on a shared property or value. Enter an expression or a property of the output.
-Property <FieldName> : One and only one field name. The default value is "Name".

> Get-ChildItem | Format-Wide
> Get-ChildItem | Format-Wide -AutoSize
> Get-ChildItem | Format-Wide -Column 3
> Get-ChildItem | Format-Wide -Property Length
> Get-ChildItem | Format-Wide -Property Length -GroupBy Length

> Get-Process | Format-Wide
> Get-Process | Format-Wide -Property Id
> Get-Process | Format-Wide -AutoSize
> Get-Process | Format-Wide -Column 4
------------------------------------------------------------
Format table.
Format each row of result into a better format.

Options:
-AutoSize : Indicates that this cmdlet adjusts the column size and number of columns based on the width of the data.
-GroupBy <Object> : Specifies the output in groups based on a shared property or value. Enter an expression or a property of the output.
-Property <FieldName> : One and only one field name. The default value is "Name".
-Wrap : Indicates that the cmdlet displays text that exceeds the column width on the next line. By default, text that exceeds the column width is truncated.

> Get-ChildItem | Format-Table
> Get-ChildItem | Format-Table -AutoSize -Wrap
> Get-ChildItem | Format-Table -Property Name, Length
> Get-ChildItem | Format-Table -Property Name, Length -GroupBy Length

> Get-Process | Format-Table
> Get-Process | Format-Table -AutoSize
> Get-Process | Format-Table -Property Id, Name
------------------------------------------------------------
Grid view.
Open a separated window for grid view of result.

Options:
-Title <String> : Specifies the text that appears in the title bar of the Out-GridView window.
                  By default, the title bar displays the command that invokes Out-GridView.

> Get-ChildItem | Out-GridView
> Get-ChildItem | Out-GridView -Title "This is result"
================================================================================
Sort-Object.

Options:
-CaseSensitive : Indicates that the sort should be case sensitive. By default, sorting is not case sensitive.
-Descending : Indicates that the cmdlet sorts the objects in descending order. The default is ascending order.
              The Descending parameter applies to all properties. To sort by some properties in ascending order and others in descending order, you must specify their property values by using a hash table.
-Property <Object[]> : Specifies the properties to use when sorting. Objects are sorted based on the values of these properties. Enter the names of the properties. Wildcards are permitted.
-Unique : Indicates that the cmdlet eliminates duplicates and returns only the unique members of the collection. You can use this parameter instead of using the Get-Unique cmdlet.

> Get-Process | Select Id, Name | Sort Id
> Get-Process | Select Id, Name | Sort Name, Id
> Get-Process | Select Id, Name | Sort Name -Unique
------------------------------------------------------------
Select-Object.

Options:
-ExcludeProperty <String[]> : Specifies the properties that this cmdlet excludes from the operation. Wildcards are permitted.
-First <Int32> : Gets only the specified number of objects. Enter the number of objects to get.
-Index <Int32[]> : Specifies an array of objects based on their index values. Enter the indexes in a comma-separated list.
                   Indexes in an array begin with 0, where 0 represents the first value and (n-1) represents the last value.
-Last <Int32> : Specifies the number of objects to select from the end of an array of input objects.
-Property <Object[]> : Specifies the properties to select. Wildcards are permitted.
-Skip <Int32> : Ignores the specified number of objects and then gets the remaining objects. Enter the number of objects to skip.
-SkipLast <Int32> :
-Unique [<SwitchParameter>] : Specifies that if a subset of the input objects has identical properties and values, only a single member of the subset will be selected.

> Get-ChildItem | Select Name, Length
> Get-ChildItem | Select Name, Length -First 2
> Get-ChildItem | Select Name, Length -Skip 1
> Get-ChildItem | Select Name, Length -Last 2

> Get-Process | Select Id, Name
> Get-Process | Select Id, Name -First 10
> Get-Process | Select Id, Name -Last 10
> Get-Process | Select Name -Unique
------------------------------------------------------------
Where-Object.
"?" is alias.

> Get-Verb | Where Group -Match "Common"
> Get-Verb | Where {$_.Group -Match "Common"}
> Get-Verb | ? Group -Match "Common"
> (Get-Verb).Where({$PSItem.Group -Match "Common"})
> (Get-Verb).Where({$_.Group -Match "Common"})

> Get-ChildItem | Where Length -GT 13
> (Get-ChildItem).Where({$PSItem.Length -GT 13})
> (Get-ChildItem).Where({!($_.Length -GT 13)})

> (Get-ChildItem).Where({($_.Length -Eq 13) -Or ($_.Length -Eq 14)})

Note that,
Both "$PSItem" and "$_" means current item in the pipe line.
Both "-Not" and "!" means not.
------------------------------------------------------------
Group-Object.

> Get-Verb | Group Group
================================================================================
Create object.

Options:
-ComObject <String> : Specifies the programmatic identifier (ProgID) of the COM object.
-TypeName <String> : Specifies the fully qualified name of the .NET Framework class. You cannot specify both the TypeName parameter and the ComObject parameter.

> $wshShell = New-Object -ComObject "WScript.Shell"

Note that:
"WScript.Shell" is a COM defined in "HKEY_CLASSES_ROOT\WScript.Shell".
================================================================================
Create a temp file in "%Temp%".

> New-TemporaryFile -WhatIf
------------------------------------------------------------
Create a file.

The <PathName> and <FileName> are case-insensitive.
The default "-ItemType" is "File".
The default "-Path" is ".".
The default "-Value" is empty. "-Value" for "New-Item" has no new line end.

> New-Item -Path <PathName> -Name <FileName> -ItemType File -Value "InitialContent"
> New-Item -Path <PathName> -Name <FileName>
> New-Item -Name <FileName>
------------------------------------------------------------
Show file content.

> Get-Content <FilePath>
> type <FilePath>
------------------------------------------------------------
Set new file content with new line end.

> Set-Content <FilePath> -Value "Content"
------------------------------------------------------------
Append file content with new line end.

> Add-Content <FilePath> -Value "Content"
================================================================================
Get date.

> Get-Date
================================================================================
