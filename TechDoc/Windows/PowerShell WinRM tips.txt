================================================================================
PowerShell
================================================================================
Enable/Disable WinRM on remote host.
(Need admin privilege.)

> Enable-PSRemoting

WinRM has been updated to receive requests.
WinRM service type changed successfully.
WinRM service started.

WinRM has been updated for remote management.
Created a WinRM listener on HTTP://* to accept WS-Man requests to any IP on this machine.
WinRM firewall exception enabled.
Configured LocalAccountTokenFilterPolicy to grant administrative rights remotely to local users.

> Disable-PSRemoting

WARNING: Disabling the session configurations does not undo all the changes made by the Enable-PSRemoting or Enable-PSSessionConfiguration cmdlet.
You might have to manually undo the changes by following these steps:
    1. Stop and disable the WinRM service.
    2. Delete the listener that accepts requests on any IP address.
    3. Disable the firewall exceptions for WS-Management communications.
    4. Restore the value of the LocalAccountTokenFilterPolicy to 0, which restricts remote access to members of the Administrators group on the
computer.

Note that,
The WinRM service is "Windows Remote Management (WS-Management)".
------------------------------------------------------------
Check WinRM on local.
(Need admin privilege.)

> Test-WSMan
> Test-WSMan -Authentication default

Check WinRM on remote host.

> Test-WSMan -ComputerName DESKTOP0
> Test-WSMan -ComputerName 192.168.0.10
================================================================================
Find Cmdlets supporting remote access.

> Get-Help * -Parameter ComputerName | ? ModuleName -Match "PowerShell.Management" | Sort Name | Format-Table Name, Synopsis -AutoSize -Wrap
================================================================================
Get Windows events on remote PC with popup window for password.

> Get-WinEvent -LogName application -MaxEvents 5 -ComputerName DESKTOP0 -Credential DESKTOP0\administrator
> Get-WinEvent -LogName application -MaxEvents 5 -ComputerName 192.168.0.10 -Credential <UserName>
------------------------------------------------------------
Run "Get-WinEvent" for remote host, and get error:
"Get-WinEvent : The RPC server is unavailable."

Solution:
On remote host, launch the Group Policy Editor "GPEdit".
From "Computer Configuration / Windows Settings / Security Settings / Windows Firewall Advanced Security", select "Inbound Rules".
Right-click on it and select "New Rule...".
Choose "Predefined" radio button, and select "Remote Event Log Management" option in drop down list, and click "Next" button.
Accept the defaults, and click "Next" button.
Choose "Allow the connection", and click "Finish" button.
================================================================================
Add trusted remote host on local client.

On client, launch the Group Policy Editor "GPEdit".
From "Computer Configuration / Administrative Templates / Windows Remote Management (WinRM) / WinRM Client", select "Trusted Hosts".
Double-click on it and check "Enabled" option.
In "Options" section, fill "Trusted Hosts" with a list of remote hosts. For example, "192.168.0.10"

After that, the client can use "Enter-PSSession" to login trusted remote hosts.
------------------------------------------------------------
Add trusted client on remote host.
If "TrustedHosts" is not set, it means trust all clients. 

> Set-Item WSMan:\localhost\Client\TrustedHosts -Value "192.168.0.11"
> Get-Item WSMan:\localhost\Client\TrustedHosts
================================================================================
Login remote host.

> Enter-PSSession -ComputerName <HostName_IP> -Credential <UserName>
------------------------------------------------------------
Run command on remote host.

> Invoke-Command -ComputerName <HostName_IP> -Credential <UserName> -ScriptBlock {$PSVersionTable}
------------------------------------------------------------
> $session=New-PSSession -ComputerName <HostName_IP> -Credential <UserName>
> Enter-PSSession $session
> Invoke-Command -Session $session -ScriptBlock {$PSVersionTable}
> Get-PSSession
> Get-PSSession | Remove-PSSession
================================================================================
