================================================================================
Check plugin list.

> vagrant plugin list

Update installed plugins.

> vagrant plugin update
------------------------------------------------------------
Install plugin for VirtualBox guest.

> vagrant plugin install vagrant-vbguest

It is only useful when the container requires some VirtulBox related function.
For exiting container, it requires to destroy and up again to take into effect.
For new container, it may require to up and halt and up again to take into effect.
------------------------------------------------------------
Check VirtualBox guest VM status.

> vagrant vbguest --status
================================================================================
Repo

https://app.vagrantup.com/centos
https://app.vagrantup.com/ubuntu
https://app.vagrantup.com/bento
------------------------------------------------------------
Image

https://app.vagrantup.com/centos
centos/7

https://app.vagrantup.com/ubuntu
ubuntu/xenial64

https://app.vagrantup.com/Sliim
Sliim/kali-2018.1-amd64
================================================================================
Box/Images.
------------------------------------------------------------
List images.

> vagrant box list
------------------------------------------------------------
Add images.

> vagrant box add <ImageId> <ImageName>.box
> vagrant box add <ImageId> <URL>
------------------------------------------------------------
Update images.

> vagrant box update
> vagrant box update <ImageId>
------------------------------------------------------------
Delete image.

> vagrant box remove <ImageId>
> vagrant box remove <ImageId> --box-version <VersionNumber>
------------------------------------------------------------
Build new image from existing image.
(Default new image name "package.box")

> vagrant box repackage <ImageName> <VmProvide> <ImageVersion>

Sample:

> vagrant box repackage bento/centos-7.3 virtualbox 2.3.2
================================================================================
Init empty project and Vagrantfile.

> vagrant init
------------------------------------------------------------
Create containers from image and start containers defined in Vagrantfile.
If already created, just start containers.

> vagrant up
> vagrant up <ContainerNameOrID>

Option: --debug
------------------------------------------------------------
Stop containers.

> vagrant halt
> vagrant halt <ContainerNameOrID>
------------------------------------------------------------
Hibernate containers.

> vagrant suspend
> vagrant suspend <ContainerNameOrID>
------------------------------------------------------------
Resume containers.

> vagrant resume
> vagrant resume <ContainerNameOrID>
------------------------------------------------------------
Delete containers.

> vagrant destroy
> vagrant destroy <ContainerNameOrID>
================================================================================
Vagrant SSH key
------------------------------------------------------------
Location

~/.vagrant.d/insecure_private_key
%USERPROFILE%\.vagrant.d\insecure_private_key
================================================================================
Check global containers status.

> vagrant global-status
------------------------------------------------------------
Check local containers status.

> vagrant status
> vagrant status <ContainerNameOrID>
------------------------------------------------------------
Check container SSH config.

> vagrant ssh-config
> vagrant ssh-config <ContainerNameOrID>
------------------------------------------------------------
SSH login container.

> vagrant ssh
> vagrant ssh <ContainerNameOrID>
------------------------------------------------------------
Reload container.

> vagrant reload <ContainerName>
> vagrant reload --provision <ContainerName>
------------------------------------------------------------
Build new image from container.
(Default new image name "package.box")

> vagrant package <ContainerName>
> vagrant package <ContainerName> --output <ImageName>.box
================================================================================
Default user
------------------------------------------------------------
User name / Password: vagrant / vagrant
User name / Password: root / vagrant

"vagrant" user has SSH key and is sudoer without password.
================================================================================
Use bridge network
------------------------------------------------------------
Use DHCP.

  # Use DHCP gateway.
  config.vm.network "public_network", use_dhcp_assigned_default_route: true
  # Will get DHCP IP.
------------------------------------------------------------
Assign IP.

Use DHCP first, to find out the actually interface name. Because it may not be "eth1".
----------------------------------------
  # Use DHCP gateway.
  config.vm.network "public_network", use_dhcp_assigned_default_route: true
  # Not use DHCP IP, will configure IP manually.
  config.vm.network "public_network", auto_config: false
  # Configure IP manually.
  config.vm.provision "shell", run: "always", inline: "ifconfig eth1 192.168.0.10 netmask 255.255.255.0 up"
================================================================================
Auto mount local current path to "/vagrant" inside container.
================================================================================
Provisioner
------------------------------------------------------------
By default, provisioner only run in the first time "vagrant up", and will not run in the following times.
------------------------------------------------------------
Force to run provisioner in 2nd time onwards.

$ vagrant provision

Force not to run provisioner in 1st time.

$ vagrant up --no-provision
------------------------------------------------------------
Enable provisioners by type, if there is multiple provisioners.

$ vagrant up --provision-with <ProvisionerList>

Sample:

$ vagrant up --provision-with ansible,shell
================================================================================
