================================================================================
Ansible
================================================================================
Install for RHEL/CentOS
------------------------------------------------------------
Make sure at least the following packages have been installed already.

python
python-crypto
python-devel
python-jinja
python-openssl
python-setuptools
libffi-devel
openssh
openssl
openssl-devel
----------------------------------------
If installed python with "Development Tools", it may only require to:

]# yum install -y python-devel openssl-devel

Otherwise, install all:

]# yum install -y python python-crypto python-devel python-jinja python-openssl python-setuptools libffi-devel openssh openssl openssl-devel
------------------------------------------------------------
]# pip install ansible
----------------------------------------
Successfully installed MarkupSafe-0.23 PyYAML-3.12 ansible-2.2.1.0 cryptography-1.7.2 jinja2-2.8.1 paramiko-2.1.1 pycrypto-2.6.1
================================================================================
Install for Cygwin
------------------------------------------------------------
Make sure at least the following packages have been installed already.

gcc
python
python-crypto
python-devel
python-jinja
python-openssl
python-setuptools
libffi-devel
openssh
openssl
openssl-devel
----------------------------------------
]# pip install ansible
================================================================================
Install for Windows 10
------------------------------------------------------------
Download VC compiler from: https://blogs.msdn.microsoft.com/pythonengineering/2016/04/11/unable-to-find-vcvarsall-bat/
And install Windows 10 SDK.
----------------------------------------
> pip install ansible
================================================================================
]# ansible --version
ansible 2.2.1.0
================================================================================
Generate SSH key pair.

]# mkdir -p ~/ansible
]# ssh-keygen -t rsa -N "" -C "Ansible Server" -f ~/ansible/ansible_key | tee ~/ansible/ssh-keygen.log

For SSH public key file "~/ansible/ansible_key.pub",
Add the key inside to remote host "~/.ssh/authorized_keys".

For SSH private key "~/ansible/ansible_key",
Set path to it in "ansible.cfg".
================================================================================
Ansible will search config file in order:

./ansible.cfg
~/ansible.cfg
/etc/ansible/ansible.cfg
------------------------------------------------------------
Generate config file.

]$ vi ansible.cfg
----------------------------------------
[defaults]
hostfile=endpoint_hosts
remote_user=root
private_key_file=~/ansible/ansible_key
host_key_checking=False

[ssh_connection]
# For Cygwin.
ssh_args = -o ControlMaster=no
------------------------------------------------------------
Generate host file.
The default file name is "/etc/ansible/hosts".

]$ vi endpoint_hosts
----------------------------------------
Optional to add:

[endpoint_group]
----------------------------------------
If use cfg file with "[defaults]":

EndpointA ansible_ssh_host=192.168.0.xx ansible_ssh_port=22
----------------------------------------
If not use cfg file:

EndpointA ansible_ssh_host=192.168.0.xx ansible_ssh_port=22 ansible_ssh_user=root ansible_ssh_private_key_file=~/ansible/ansible_key
================================================================================
Install Python on remote host.
------------------------------------------------------------
On remote host, Python is required to run ansible script.
The default path is "/usr/bin/python" for Python 2.
------------------------------------------------------------
If installed Python 3 (such as the default on Ubuntu),
----------------------------------------
1. set "ansible_python_interpreter" in "hostfile".

[SomeHosts]
Ep1
Ep2

[SomeHosts:vars]
ansible_python_interpreter=/usr/bin/python3
----------------------------------------
2. Or set "ansible_python_interpreter" in playbook yml.

  vars:
    ansible_python_interpreter: /usr/bin/python3
----------------------------------------
3. Or set "ansible_python_interpreter" while running playbook yml.

ansible-playbook -l Ep1 Action.yml -e "ansible_python_interpreter=/usr/bin/python3"
================================================================================
Test ping.
------------------------------------------------------------
If use cfg file with "[defaults]":

]$ ansible EndpointA -m ping

With debug info.

]$ ansible EndpointA -m ping -vvvv
------------------------------------------------------------
If not use cfg file:

]$ ansible EndpointA -i endpoint_hosts -m ping

With debug info.

]$ ansible EndpointA -i endpoint_hosts -m ping -vvvv
------------------------------------------------------------
Use group name to reference.

]$ ansible endpoint_group -m ping
------------------------------------------------------------
Use for all hosts.

]$ ansible all -m ping

or

]$ ansible '*' -m ping
================================================================================
Check uptime

]$ ansible EndpointA -m command -a uptime

"-m command" is default, can be omitted.

]$ ansible EndpointA -a uptime
================================================================================
"sudo" Flag

Add "-s" if want to run "sudo" command.
The client user should be set as sudoer.

]$ ansible EndpointA -s -a uptime
================================================================================
Check playbook syntax

]$ ansible-playbook --syntax-check <PlayBookName>.yml
------------------------------------------------------------
List hosts involved in playbook

]$ ansible-playbook --list-hosts <PlayBookName>.yml
------------------------------------------------------------
List tasks defined in playbook

]$ ansible-playbook --list-tasks <PlayBookName>.yml
================================================================================
Run playbook

]$ ansible-playbook <PlayBookName>.yml

For different host file.

]$ ansible-playbook -i <HostFile> <PlayBookName>.yml
]$ ansible-playbook --inventory-file <HostFile> <PlayBookName>.yml

For certain host or group.

]$ ansible-playbook -l <Host_Or_Group> <PlayBookName>.yml
]$ ansible-playbook --limit <Host_Or_Group> <PlayBookName>.yml
------------------------------------------------------------
Sample:

]$ ansible-playbook greet.yml

With debug info.

]$ ansible-playbook greet.yml -vvvv

Overwrite defined variables in command line.
(To include space, use double quotation to include string first.
Then use single quotation to include variable definition.)

]$ ansible-playbook greet.yml -e greeting=Hello
]$ ansible-playbook greet.yml -e 'greeting="Hello Friend!"'

Overwrite defined variables by file.

]$ ansible-playbook greet.yml -e @greetvars.yml
================================================================================
Run in check mode (Dry run)

]$ ansible-playbook -C <PlayBookName>.yml
]$ ansible-playbook --check <PlayBookName>.yml
------------------------------------------------------------
Run in check mode (Dry run) and show file diff

]$ ansible-playbook -C -D <PlayBookName>.yml
]$ ansible-playbook --check --diff <PlayBookName>.yml
------------------------------------------------------------
Prompt for each task while running playbook

]$ ansible-playbook --step <PlayBookName>.yml
------------------------------------------------------------
Start at certain task

]$ ansible-playbook --start-at-task <TaskName> <PlayBookName>.yml
------------------------------------------------------------
Execute tasks with certain tags

]$ ansible-playbook -t <TagNameList> <PlayBookName>.yml
]$ ansible-playbook --tags=<TagNameList> <PlayBookName>.yml

Execute tasks without certain tags

]$ ansible-playbook --skip-tags=<TagNameList> <PlayBookName>.yml

TagNameList is separated by comma.
================================================================================
Role
------------------------------------------------------------
Init role

]$ ansible-galaxy --start-at-task <TaskName> <PlayBookName>.yml
------------------------------------------------------------
List installed role

Role file in default "/etc/ansible/roles".

]$ ansible-galaxy list

In specified paht.

]$ ansible-galaxy list -p <RolePath>
------------------------------------------------------------
Init role path structure

]$ ansible-galaxy init -p <RolePath> <Role>
================================================================================
Escape "{{" and "}}" in YAML

Sample:

    - name: Check running containers
      shell: docker ps --format {%raw%}"{{.Image}}"{%endraw%}
================================================================================
Pattern for specifying hosts
------------------------------------------------------------
In YAML:
  hosts: <Host_Or_Group>

In command line:
  -l <Host_Or_Group>
By command line, only Host_Or_Group defined in YAML hosts are available.
------------------------------------------------------------
All:          *
All:          all
Union:        a:b
Intersection: a:&b
Exclusion:    a:!b
Wildcard:     *.example.com
Range:        web[1:9].example.com
              web[01:09].example.com
              web[a:c].example.com
Regex:        ~web\d\.example\.com
================================================================================
Trick to add multiple lines in yaml file
------------------------------------------------------------
Sample:

    - name: Create a file
      shell:
        cmd: |
          cat > ~/text.cfg << EOF
          [Unit]
          Description=Start TightVNC server at startup
          After=syslog.target network.target
          
          [Service]
          Type=forking
          User=vagrant
          PAMName=login
          PIDFile=/home/vagrant/.vnc/%H:%i.pid
          ExecStartPre=-/usr/bin/vncserver -kill :%i > /dev/null 2>&1
          ExecStart=/usr/bin/vncserver -depth 24 -geometry 1280x800 :%i
          ExecStop=/usr/bin/vncserver -kill :%i
          EOF
================================================================================
