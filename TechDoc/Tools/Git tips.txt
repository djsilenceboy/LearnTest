================================================================================
https://git-scm.com/book/en/v2

https://progit2.s3.amazonaws.com/en/2016-03-22-f3531/progit-en.1084.pdf

https://training.github.com/kit/downloads/github-git-cheat-sheet.pdf
================================================================================
Git config file
------------------------------------------------------------
Show the config files, which git will search for in order.

> git config --list --show-origin

For Linux:
/etc/gitconfig
~/.gitconfig
.git/config

For Windows:
C:\ProgramData\Git\config
C:\Program Files\Git\mingw64\etc\gitconfig
C:\Users\<User>\.gitconfig
<Local_Repo>\.git\config
------------------------------------------------------------
Show config from all config files.

> git config --list

Show global config from "/etc/gitconfig" or "C:\Users\<User>\.gitconfig".

> git config --system --list

Show global config from "~/.gitconfig" or "C:\Program Files\Git\mingw64\etc\gitconfig".

> git config --global --list

Show global config from "<Local_Repo>/.git/config" "<Local_Repo>\.git\config".

> git config --local --list
================================================================================
Local Git repository
------------------------------------------------------------
Create a new local repository.

The default branch is "master".

> git init
================================================================================
Repository
------------------------------------------------------------
Clone local repository.

To current folder.

> git clone /path/to/repository

To specified folder.

> git clone /path/to/repository /path/to/another_repository
------------------------------------------------------------
Clone remote repository.

The default remote name/branch is "origin/master".

> git clone username@host:/path/to/repository

With new alias remote name.
The remote name/branch will be "<NewRemoteName>/master".

> git clone username@host:/path/to/repository <NewRemoteName>
------------------------------------------------------------
Add remote repository to local.
(Especially, local repository is not clone from remote one.)

> git remote add <NewRemoteName> git://host[:port]/path/to/repo.git

The normal <NewRemoteName> is "origin".
It can add several <NewRemoteName> for same repository.

> git remote add origin "Repo1"
> git remote add tom "Repo1"
------------------------------------------------------------
Remove remote repository from local.

> git remote rm <ExistingRemoteName>
------------------------------------------------------------
Rename remote repository.

> git remote rename <OldRemoteName> <NewRemoteName>
------------------------------------------------------------
Check repository.

Show remote names.

> git remote
> git remote show

Show details of remote repository.

> git remote show <RemoteName>

Show remote name and URL list.

> git remote -v
> git remote --verbose
================================================================================
Branch
------------------------------------------------------------
Create new branch.

> git branch <NewBranchName>
------------------------------------------------------------
Check branch.

Check current branches.
The checked-out one has a star.

> git branch

With more details.

> git branch -v
> git branch --verbose

With more details and tracking branch info.

> git branch -vv

Check all available branches.

> git branch -a
> git branch --all

Check already merged branch.

> git branch --merged
> git branch --merged -v

Check remote branches.

> git branch --remotes
> git branch --remotes -v
------------------------------------------------------------
Change tracking remote branch for current checked-out branch.

For remote "origin" branch.

> git branch -u <BranchName>

For remote branch.

> git branch -u <RemoteName>/<BranchName>
------------------------------------------------------------
Delete branch locally.

> git branch -d <BranchName>
================================================================================
Checkout branch
------------------------------------------------------------
Switch to a local branch.

> git checkout <BranchName>

Copy a remote branch to local and switch to it.

> git checkout -t <RemoteName>/<BranchName>
> git checkout --track <RemoteName>/<BranchName>
------------------------------------------------------------
Create new branch and switch to it.

> git checkout -b <BranchName>

Create new branch for remote "origin" branch and switch to it

> git checkout -b <BranchName> <RemoteBranchName>

Create new branch for remote branch and switch to it

> git checkout -b <BranchName> <RemoteName>/<BranchName>
================================================================================
Rebase

(ONLY rebase branch, which is managed locally!!!)
(DO NOT rebase branch, which had already pushed/shared to remote!!!)
------------------------------------------------------------
Rebase current checked-out branch to target branch.

> git rebase <TargetBranchName>

Rebase source checked-out branch to target branch.

> git rebase <TargetBranchName> <SourceBranchName>
------------------------------------------------------------
Rebase from source checked-out branch to target branch by referring related branch.

> git rebase --onto <TargetBranchName> <RelatedBranchName> <SourceBranchName>
------------------------------------------------------------
Rebase interactively.

> git rebase --interactive master
> git rebase --continue
================================================================================
Pull from remote to local
------------------------------------------------------------
Get info only.

From "origin" remote repository.

> git fetch

From specified remote repository.

> git fetch <RemoteName>
------------------------------------------------------------
Merge.

Merge remote branch "origin/master" into current checked-out branch by Fast-Forward.

> git merge

Merge specified remote "origin" branch into current checked-out branch by Fast-Forward.

> git merge <SourceBranchName>

Merge specified remote branch into current checked-out branch by Fast-Forward.

> git merge <RemoteName>/<SourceBranchName>

With "--no-ff', not use Fast-Forward, combine all merged commits into a new commit, and merged.

> git merge --no-ff
> git merge --no-ff <SourceBranchName>

With "--squash", not use Fast-Forward, combine all merged commits into a new commit, and not merged.

> git merge --squash
> git merge --squash <SourceBranchName>

With "--strategy-option".

> git merge --strategy-option=ours <SourceBranchName>
> git merge --strategy-option=theirs <SourceBranchName>
------------------------------------------------------------
Get and merge/rebase together.

Get and merge remote branch "origin/master" into current checked-out branch.

> git pull

Get and rebase remote branch "origin/master" into current checked-out branch.

> git pull --rebase=preserve

Get and merge specified remote "origin" branch into current checked-out branch.

> git pull <BranchName>

Get and merge specified remote branch into current checked-out branch.

> git pull <RemoteName>/<BranchName>
================================================================================
Push from local to remote
------------------------------------------------------------
Push changes from local branch to remote repository.

Push current checked-out branch to remote "origin/master".

> git push

Push current checked-out branch to specified remote.

> git push <RemoteName>

Push newly created checked-out branch to specified remote.
(It will create a copy of branch in repository.)

> git push --set-upstream <RemoteName> <BranchName>

Push specified checked-out branch to specified remote.

> git push <RemoteName> <BranchName>

Push specified checked-out branch to specified remote and branch.

> git push <RemoteName> <BranchName>:<RemoteBranchName>
------------------------------------------------------------
Delete branch on remote repository.

> git push <RemoteName> :<RemoteBranchName>

> git push <RemoteName> --delete <RemoteBranchName>
================================================================================
Staging and Commit
------------------------------------------------------------
Add files to be tracked (if not tracked yet) and to staging.

> git add <FileName>

Add all new files in current folder.

> git add *
----------------------------------------
Add all changes (new files, modified files, delete files).

> git add -A

Add changes (new files, modified files) only.

> git add .

Add changes (modified files, delete files) only.

> git add -u
------------------------------------------------------------
Remove file from staging, but preserve its content.

> git reset <FileName>
------------------------------------------------------------
Delete files from staging and to be untracked.

Also delete files from disk.

> git rm <FileName>

Still keep files on disk.

> git rm --cached <FileName>
------------------------------------------------------------
Move/Rename files.

> git mv <FileName> <NewFileName>
------------------------------------------------------------
Commit files from staging to branch.

> git commit -m "<Comments>"
------------------------------------------------------------
Commit tracked files to staging first, then to branch.
(New files should "git add" first.)

> git commit -a -m "<Comments>"
------------------------------------------------------------
Add more changes to same commit.
(Do it after "git commit -m".)

> git add <FileName>
> git commit --amend
------------------------------------------------------------
Check status of staging and commit.

> git status
================================================================================
Reset
------------------------------------------------------------
Remove files from staging and discarded all unstaged files.

> git reset --hard
------------------------------------------------------------
Remove files from staging, but preserve its content.

> git reset HEAD <FileName>
------------------------------------------------------------
Reset back to where before just merged.

> git reset --merge ORIG_HEAD
------------------------------------------------------------
Reset back to a commit and unstage uncommited files.

> git reset <Commit>

> git reset HEAD~n
(n is a number from 1. HEAD~n means the commit back from HEAD.)
------------------------------------------------------------
Reset back to a commit and discard uncommited files.

> git reset --hard <Commit>
------------------------------------------------------------
Reset modified and unstaged files to origin content.

> git checkout -- <FileName>
------------------------------------------------------------
To fully reset local copy.

> git fetch --all
> git reset --hard origin/master
> git pull origin master
================================================================================
Clean
------------------------------------------------------------
Clean all untracked files from working folder.

> git clean -d

By force.

> git clean -d -f
================================================================================
Stash

Save unstaged and uncommited files temporarily, and remove them from working folder.
------------------------------------------------------------
Save tracked files.

> git stash
> git stash save
------------------------------------------------------------
Save both tracked and untracked files.

> git stash --include-untracked
> git stash save --include-untracked
------------------------------------------------------------
Check stashed copy list.

> git stash list
------------------------------------------------------------
Check stashed files in one copy.

> git show <StashId>
------------------------------------------------------------
Restore stashed files to current branch and keep that copy in stash.

> git stash apply
> git stash apply <StashId>

With "--index" to reapply staged files.
------------------------------------------------------------
Restore stashed copy to current branch and delete that copy from stash.

> git stash pop
> git stash pop <StashId>

With "--index" to reapply staged files.
------------------------------------------------------------
Discard stashed copy.

> git stash drop
> git stash drop <StashId>
------------------------------------------------------------
Discard all stashed copies.

> git stash clear
------------------------------------------------------------
Create a new branch, and apply stashed files there, and drop stashed here.

> git stash branch <BranchName>
================================================================================
Tag
------------------------------------------------------------
Add lightweight tag.

> git tag <TagName>
------------------------------------------------------------
Add annotated tag.

> git tag -a <TagName> -m "<Comments>"
------------------------------------------------------------
Check tag list.

> git tag

Find certain tag(s).

> git tag -l <TagPattern>
------------------------------------------------------------
Show details of tag.

> git show <TagName>
------------------------------------------------------------
Push tags to remote repository.

Push a new tag to specified remote repository.

> git push <RemoteName> <TagName>

Push all new tags to default remote repository.

> git push --tags

Push all new tags to specified remote repository.

> git push <RemoteName> --tags
================================================================================
Log
------------------------------------------------------------
Check full log.

> git log
> git log -<NumberOfRecentLog>
------------------------------------------------------------
Full log with diff.

> git log -p
> git log -p <File>
------------------------------------------------------------
One line with short SHA-1.

> git log --oneline
------------------------------------------------------------
One line with short SHA-1 and branch headers.

> git log --oneline --decorate
------------------------------------------------------------
One line with short SHA-1 and graph.

> git log --oneline --graph
------------------------------------------------------------
One line with full SHA-1.

> git log --pretty=oneline
------------------------------------------------------------
One line with format.

> git log --pretty=format:"%h - %an, %ar : %s"
------------------------------------------------------------
Check reference log.

> git reflog
------------------------------------------------------------
Clean all reference log.

> git reflog expire --expire=now --all
================================================================================
https://git-scm.com/book/en/v2/Git-Internals-Maintenance-and-Data-Recovery
------------------------------------------------------------
Check object status

> git count-objects -Hv
------------------------------------------------------------
Prune object

> git prune -v --progress
> git prune -v --progress -n
------------------------------------------------------------
Memory garbage collection

> git gc

> git gc --prune
> git gc --prune=now
================================================================================
Rewrite branch and history
------------------------------------------------------------
> git filter-branch
------------------------------------------------------------
https://help.github.com/articles/removing-sensitive-data-from-a-repository/
----------------------------------------
1. Remove file from history.

> git filter-branch --index-filter 'git rm --cached --ignore-unmatch <PathToFile>' HEAD
> git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch <PathToFile>' --prune-empty --tag-name-filter cat -- --all

For Windows, use double quota.
----------------------------------------
2. Push changes back to origin.

> git push origin --force --all
> git push origin --force --tags
================================================================================
Save git user/password
------------------------------------------------------------
> git config credential.helper store
> git push

Username for 'https://github.com':
Password for 'https://xxx@github.com':
================================================================================
Show all ref points

> git show-ref

Show all ref points including PR

> git ls-remote

PR ref like:
refs/pull-requests/*/from
refs/pull-requests/*/merge
================================================================================
