================================================================================
Docker CE (Community Edition)
------------------------------------------------------------
Install for CentOS/RHEL from Docker repository.

sudo yum install -y yum-utils
sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

sudo yum makecache fast
sudo yum install -y docker-ce
------------------------------------------------------------
Check repo file.

]$ cat /etc/yum.repos.d/docker-ce.repo
================================================================================
Docker service.

CentOS/RHEL 7

]$ sudo systemctl enable docker
]$ sudo systemctl disable docker

]$ sudo systemctl start docker
]$ sudo systemctl stop docker
------------------------------------------------------------
Manually start/stop Docker.

Start

]# dockerd &
]# docker daemon &

Options:
--bip : Specify network bridge IP in "IP/SubnetMuskBit" format.
-b, --bridge : Attach containers to a network bridge in "PreDefinedNetworkName" format.
--dns [] : Add DNS IP.
--fixed-cidr : IPv4 subnet for fixed IPs in "Subnet/MuskBit" format.
--icc : Enable or disable inter-container communication. Values [true, false], the default value is true.
----------------------------------------
Stop

]# killall docker
------------------------------------------------------------
If some network connection not working inside container,
try restart docker service.
------------------------------------------------------------
Check version

]# docker version
]# docker -v
------------------------------------------------------------
Check general info

]# docker info
================================================================================
Search image from registry.

]# docker search <Image>
]# docker search <Host>:<Port>/<Image[:Tag]>
------------------------------------------------------------
Pull the image from registry.

]# docker pull <Host>:<Port>/<Image[:Tag]>
------------------------------------------------------------
Load the image from a local file (tar).

]# docker load -i <ImageFile.tar>

]# docker load < <ImageFile.tar>
------------------------------------------------------------
Save the image to a local file (tar or tar.gz).
(The binary image block files.)

]# docker save -o <ImageFile.tar> <Image[:Tag]>

]# docker save <Image[:Tag]> > <ImageFile.tar>

]# docker save <Image[:Tag]> | gzip > <ImageFile.tar.gz>
------------------------------------------------------------
Push the image to registry.

]# docker push <Host>:<Port>/<Image[:Tag]>

]# docker push localhost:5000/<Image[:Tag]>
------------------------------------------------------------
Check loaded images.

]# docker images
------------------------------------------------------------
Check image's build history.

]# docker history <Image[:Tag]>
------------------------------------------------------------
Delete loaded images.

]# docker rmi <Image[:Tag]>...

Options:
-f, --force : by force.

Delete all images.

]# docker rmi `docker images -q`
------------------------------------------------------------
Some small sample images.

busybox, alpine, nginx
================================================================================
Create container.

]# docker create --name <ShortName> <Repository[:Tag]>

Options:
--add-host [] : Add entry to "/etc/hosts" inside container in "HostName:IP" format.
-c, --cpu-shares <Weight> : CPU shares (relative weight). The default value is 1024 (meaning 100%).
--dns : Add DNS IP.
-e, --env [] : Add env variable in "Key=Value" format.
--expose [] : Expose a port or a range of ports. Exposed port may not be published.
-h, --hostname <HostName> : Add host name to "/etc/hostname" and add entry to "/etc/hosts" inside container.
-i, --interactive : Keep STDIN open even if not attached.
-m, --memory <MemSize> : Memory limit in "<Number><Unit>" format. Unit values [b, k, m, g]. The default value is same as host memory size. 
--network : Network type for container. Values [bridge, host, none], the default value is bridge. It can be user-defined networks by "docker network create". It can be joined container by "container:<AnotherContainerName>". "--net" for old docker version.
--pid : Use other PID namespace. Values [host, container:<AnotherContainerNameOrId>].
-P, --publish-all : Publish all exposed ports (--expose) to random host ports [32768, 61000].
-p, --publish [] : Publish a container's port(s) to the host. Published port is exposed.
  -p <ContainerPort> : Map container port to a random host port [32768, 61000].
  -p <HostPort>:<ContainerPort> : Map container port to a specified host port.
  -p <HostIP>::<ContainerPort> : Map container port to a random host port [32768, 61000] of specified host IP.
  -p <HostIP>:<HostPort>:<ContainerPort> : Map container port to a specified host port of specified host IP.
--restart=always : When Docker service started/restarted, the container will start automatically.
--read-only : The file system in container is read only.
-t, --tty : Allocate a pseudo-TTY.
-u, --user <UserNameOrId> : Default login user in "<name|uid>[:<group|gid>])" format. The default user is root. Specified user must already exist in the image.
-v, --volume : Bind mount a volume.
  -v <DockerManagedVolumeName>
  -v <HostPath>:<BindVolumeName>
  -v <HostPath>:<BindVolumeName>:<AccessFlag>
  AccessFlag: [rw, ro], default is rw.
  Mapping sequence:
    If <HostPath> is a folder on host, it is mapped as a folder in container.
    If <HostPath> is a file on host, it is mapped as a file in container.
    If <HostPath> does not exist on host, it will be created as a folder on host, and then is mapped as a folder in container.
    It will hide the same named path in container, if exists.
  If multiple -v mapping to same internal path, the late mapped one is used.
--volumes-from <VolumeContainerName> : Mount volumes from the specified container.
  If multiple volumes in different containers mapping to same internal path, the late mapped one is used.
------------------------------------------------------------
Create and start container.

]# docker run -d --name <ShortName> <Repository[:Tag]>

Options: (mostly same as for creating.)
-d, --detach : Cannot use together with "-it".
--rm : After running, remove it immediately.
------------------------------------------------------------
Export the contents of container to a local file (tar or tar.gz).
(The folders and files structure.)

]# docker export -o <ContainerFile.tar> <ContainerName[:Tag]>

]# docker export <ContainerName[:Tag]> > <ContainerFile.tar>

]# docker export <ContainerName[:Tag]> | gzip > <ContainerFile.tar.gz>

Options:
-o, --output : Write to a tar file, instead of STDOUT.
------------------------------------------------------------
Import a image from a local file (tar) with the contents of container.
(The folders and files structure.)

]# docker import <ContainerFile.tar> <ImageName>

]# docker import - <ImageName> < <ContainerFile.tar>

Options:
-c, --change <Command> : Apply Dockerfile instruction to the created image (default []).
-m, --message <String> : Set commit message for imported image.
- : Stdin.
================================================================================
Start container (Existing).

]# docker start <ContainerNameOrId>

Restart.

]# docker restart <ContainerNameOrId>
------------------------------------------------------------
Check running container.

]# docker ps

Check all container.

]# docker ps -a
]# docker ps --all

Options:
-l: Show the latest created container (includes all states)
--no-trunc : Don't truncate output in each field.
--quiet : Only display numeric IDs
------------------------------------------------------------
Stop container.

]# docker stop <ContainerNameOrId>

Stop all running containers.

]# docker stop `docker ps -q`
------------------------------------------------------------
Kill container.

]# docker kill <ContainerNameOrId>...

Options:
-s, --signal=KILL : Signal to send to the container.
------------------------------------------------------------
Delete container.

]# docker rm <ContainerNameOrId>...

Options:
-f, --force : By force.
-v, --volumes : Remove the volumes associated with the container.
================================================================================
Check container statistics.

]# docker stats
]# docker stats -a --no-stream

Options:
-a, --all : Show all containers (default shows just running).
--no-stream : Disable streaming stats and only pull the first result.
------------------------------------------------------------
Check container log.

]# docker logs <ContainerNameOrId>

Options:
-f, --follow: Works like "tail -f".
================================================================================
Check container changes.

]# docker diff <ContainerNameOrId>

Token [A, C, D]. A: Add; C: Change; D: Delete.
------------------------------------------------------------
Create new image from changed container.

]# docker commit <ContainerNameOrId> <NewImageName[:Tag]>

Options:
-a, --author <String> : Author.
-m, --message <String> : Commit message.
================================================================================
Tag image
------------------------------------------------------------
Use default tag: latest

]# docker tag <Image> <Host>:<Port>/<Image>

For localhost

]# docker tag <Image> <ImagePath>/<Image>
------------------------------------------------------------
Use specified tag

]# docker tag <Image[:Tag]> <Host>:<Port>/<Image[:Tag]>

For localhost

]# docker tag <Image[:Tag]> <ImagePath>/<Image[:Tag]>
================================================================================
Check container config

]# docker inspect <ContainerNameOrId>

Options:
-f, --format <String> : Format the output using the given Go template.
----------------------------------------
Check mount info.

]# docker inspect -f "{{.Mounts}}" <ContainerNameOrId>

In JSON format:

]# docker inspect -f "{{json .Mounts}}" <ContainerNameOrId>
------------------------------------------------------------
Check opened port of container

]# docker port <ContainerNameOrId> [<ContainerPort>]
------------------------------------------------------------
Check top inside container

]# docker top <ContainerNameOrId>
================================================================================
Copy folder/file from container to host

]# docker cp <ContainerNameOrId>:<ContainerFolder_Or_File> <HostFolder_Or_File>
------------------------------------------------------------
Copy folder/file from host to container

]# docker cp <HostFolder_Or_File> <ContainerNameOrId>:<ContainerFolder_Or_File>
================================================================================
Check network
------------------------------------------------------------
Get network type list.

]# docker network ls

NETWORK ID          NAME                DRIVER              SCOPE
d96c8b7c6017        bridge              bridge              local               
ec9bebe55777        host                host                local               
c09b728419ce        none                null                local        
------------------------------------------------------------
Check network type info.

]# docker network inspect <NetworkName>
]# docker network inspect bridge
------------------------------------------------------------
Remove a container from a network by disconnecting the container.

]# docker network inspect <NetworkName> <ContainerNameOrId>
]# docker network disconnect bridge <ContainerNameOrId>
------------------------------------------------------------
Create a new network
(Default is "bridge" driver)

]# docker network create <NetworkName>

]# docker network create -d bridge <NetworkName>

Options:
-d, --driver : Network driver name.
------------------------------------------------------------
Connect existing container to another network

]# docker network connect <NetworkName> <ContainerNameOrId>
------------------------------------------------------------
Check ports.

]# docker port <ContainerNameOrId>
================================================================================
Login container with Shell
------------------------------------------------------------
Use "docker ps" to find container ID and name.
Login in by ID or name.

]# docker exec -it <ContainerNameOrId> bash -l
]# docker exec -it <ContainerNameOrId> bash -l -c "<Command>"
]# docker exec -it <ContainerNameOrId> bash -c "<Command>"
]# docker exec -it -u <User> <ContainerNameOrId> bash -l

Notes:
1. The "bash -l" means with login shell.
2. The "bash" without "-l" means with no-login shell.
3. By default, login as root. Use "-u <User>" to login as specified user.
================================================================================
Docker volume
------------------------------------------------------------
Create.

]# docker volume create <VolumeContainerName>
------------------------------------------------------------
List.

]# docker volume ls

Options:
-f, --filter <String> : Provide filter values.
--format <String> : Pretty-print volumes using a Go template.
-q, --quiet : Only display volume names.
------------------------------------------------------------
Check info.

]# docker volume inspect <VolumeContainerName>

Options:
--format <String> : Pretty-print volumes using a Go template.
------------------------------------------------------------
Delete.

]# docker volume rm <VolumeContainerName>...

Options:
-f, --force : Force the removal of one or more volumes.
------------------------------------------------------------
Delete all unused volumes.

]# docker volume prune

Options:
-f, --force : Do not prompt for confirmation.
================================================================================
Build image.

]# docker build -t <Repository[:Tag]> <PathToFindBuildFile>

Options:
--compress : Compress the build context using gzip.
-f, --file <DockerFileName> : Name of the Dockerfile. The default is 'PATH/Dockerfile'.
-t, --tag : Name and optionally a tag in the <Repository[:Tag]> format.
            Without tag, the default name is "<none>:<none>".
================================================================================
