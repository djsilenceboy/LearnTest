WebLogic 10, JAXB 2.1, CXF and Spring WS
2012.02.03 - 2012.02.03

* About Web Service client codes.

* JAXB 2
  Since JDK 6, JAXB RI is included in JDK. Following list which JDK includes which JAXB.
  JDK6 first release - u3: JAXB RI 2.0.3
  JDK6 u4                : JAXB RI 2.1.3
  JDK6 u14               : JAXB RI 2.1.10
  JDK7 first release     : JAXB RI 2.2.4-1

* WebLogic 10.x
  It uses JDK6u5, so it only support JAXB 2.1.

* CXF
  CXF 2.2.9 uses JAXB 2.1 API and impl (2.1.13).
  CXF 2.3.x and 2.4.x use JAXB 2.2 API and impl (2.2.4-1).

* WebLogic 10.x and CXF
  CXF on WebLogic 10.x will meet "This class does not support SAAJ 1.1" issue. 
  To solve, refer to this topic: "JAX-WS, CXF and SAAJ on Oracle Weblogic 10.3" ("http://blog.xebia.com/2009/07/14/jax-ws-cxf-and-saaj-on-oracle-weblogic-103/").

* Spring Web Service
  Spring Web Service 2.0.x uses JAXB generated codes.

* Upgrade JAXB 2.2
  Suppose we use JDK 6u4, and want to upgrade to JAXB 2.2.
  Refer to this topic: "7.1.2. Using JAXB 2.1/2.2 with JavaSE 6" ("http://jaxb.java.net/guide/Migrating_JAXB_2_0_applications_to_JavaSE_6.html").

* JAXB and "required" attribute of "XmlElementRef"
  If you have codes generated by JAXB 2.2, it may contain "@XmlElementRef(required)".
  But JAXB 2.1 compiler and runtimes doesn't support "required" attribute.
  "http://jaxb.java.net/nonav/2.1/docs/api/javax/xml/bind/annotation/XmlElementRef.html",
  "http://jaxb.java.net/nonav/2.2/docs/api/javax/xml/bind/annotation/XmlElementRef.html".

* JAXB and xjc task
  JAXB uses "com.sun.tools.xjc.XJCTask" inside "jaxb-xjc-2.x.jar" to generate codes.
  If "<schema>" includes only XSD files, both xjc 2.1 and 2.2 work fine. If "<schema>" includes WSDL files and "-wsdl" option is added, xjc 2.2 works fine, but xjc 2.1 doesn't.

* JAXB xjc 2.1 and WSDL file
  JAXB xjc 2.1 (up to 2.1.13) doesn't support WSDL file well, it has following issues:
  1. Ignore the <globalBindings> part in xjb file. So it cannot replace XMLGregorianCalendar with Calendar.
  2. Ignore the <schemaBindings>/<nameXmlTransform> part in xjb file. So it cannot replace class names.
  3. Does not add "@XmlRootElement" for some types.

* CXF 2.2.9, JAXB xjc 2.1 and WSDL file
  To my surprise, although CXF 2.2.9 uses JAXB xjc 2.1.13, it solves the issues mentioned in "JAXB xjc 2.1 and WSDL file"!

* WebLogic, JAXB 2.1 and Spring WS
  We have following constraints:
  1. WebLogic uses JDK 6u5.
  2. We don't want to upgrade JDK runtimes to JAXB 2.2.
  3. We use those WSDLs, which will be generated "@XmlElementRef(required)" by JAXB 2.2.
  4. We don't want to solve SAAJ 1.1 issue with CXF.
  So, we
  1. Better use JAXB 2.1 to generate codes.
  2. Not use CXF, but use Spring WS.
  Conclusion:
  1. Use CXF 2.2.9 (with JAXB 2.1.13) to generate client codes.
  2. Use Spring WS 2.0.x to run with generated client codes based on JAXB 2.1.x runtimes.
