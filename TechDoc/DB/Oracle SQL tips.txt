
* Convert Java time (in millisecond since 1970 Jan 1 00:00:00) to Oracle Timestamp

  Suppose Java time = 1304870183336 ms
  tempTimestamp TIMESTAMP;
  tempTimestamp := TIMESTAMP'1970-01-01 00:00:00 GMT' + NUMTODSINTERVAL(1304870183336/1000, 'SECOND');

* Convert Oracle Timestamp to Java time (in millisecond since 1970 Jan 1 00:00:00)

  tempTimestamp TIMESTAMP or INTERVAL
  tempTimeInMs NUMBER(20);
  tempTimeInMs := (TO_NUMBER(EXTRACT(SECOND FROM tempTimestamp)) +
                   TO_NUMBER(EXTRACT(MINUTE from tempTimestamp)) * 60 + 
                   TO_NUMBER(EXTRACT(HOUR from tempTimestamp)) * 60 * 60 + 
                   TO_NUMBER(EXTRACT(DAY from tempTimestamp)) * 24 * 60 * 60) * 1000;

* Add/minus time interval to/from a Timestamp

  tempTimeInterval INTERVAL DAY (6) TO SECOND (3);
  tempTimeInterval := SYSTIMESTAMP - TIMESTAMP'2011-01-01 00:00:00 GMT';

  tempTimestamp TIMESTAMP;
  tempTimestamp := SYSTIMESTAMP - NUMTODSINTERVAL(10, 'DAY');


select
  (TO_DATE('2008-07-15', 'YYYY-MM-DD') - NEW_TIME(TO_DATE('1970-01-01', 'YYYY-MM-DD'), 'GMT', 'CST'))
  * 24 * 60 * 60 * 1000
from DUAL; 
 
select TIMESTAMP'1970-01-01 00:00:00 GMT' + NUMTODSINTERVAL(1216047994149/1000, 'SECOND') date_tz from DUAL

select * from SLEE_ALARM TA
where
  (TIMESTAMP'1970-01-01 00:00:00 GMT' + NUMTODSINTERVAL(TA.TIMESTAMP/1000, 'SECOND'))
  >=
  TIMESTAMP'1970-01-01 00:00:00 GMT' + NUMTODSINTERVAL(1216047994149/1000, 'SECOND')

select * from SLEE_ALARM TA
where
  (TIMESTAMP'1970-01-01 00:00:00 GMT' + NUMTODSINTERVAL(TA.TIMESTAMP/1000, 'SECOND'))
  >=
  (TIMESTAMP'1970-01-01 00:00:00 GMT' + NUMTODSINTERVAL(1216047994149/1000, 'SECOND'))
  and
  (TIMESTAMP'1970-01-01 00:00:00 GMT' + NUMTODSINTERVAL(TA.TIMESTAMP/1000, 'SECOND'))
  <=
  (TIMESTAMP'1970-01-01 00:00:00 GMT' + NUMTODSINTERVAL(1216047994444/1000, 'SECOND'))

select *
from SLEE_ALARM TA, NDP_CP_EXCEED_SLA TB
where
  (TA.SOURCE = TB.SERVICE_PROVIDER_ID)
  and
  ( (TIMESTAMP'1970-01-01 00:00:00 GMT' + NUMTODSINTERVAL(TA.TIMESTAMP/1000, 'SECOND'))
    between
    (TB.LAST_MONITORTING_TIME + NUMTODSINTERVAL(1/1000, 'SECOND'))
    and
    (TIMESTAMP'1970-01-01 00:00:00 GMT' + NUMTODSINTERVAL(1216047994444/1000, 'SECOND'))
  )

select TA.SOURCE, COUNT(TA.SOURCE) as ALARM_COUNT
from SLEE_ALARM TA, NDP_CP_EXCEED_SLA TB
where
  (TA.SOURCE = TB.SERVICE_PROVIDER_ID)
  and
  ( (TIMESTAMP'1970-01-01 00:00:00 GMT' + NUMTODSINTERVAL(TA.TIMESTAMP/1000, 'SECOND'))
    between
    (TB.LAST_MONITORTING_TIME + NUMTODSINTERVAL(1/1000, 'SECOND'))
    and
    (TIMESTAMP'1970-01-01 00:00:00 GMT' + NUMTODSINTERVAL(1216101354380/1000, 'SECOND'))
  )
group by TA.SOURCE
order by TA.SOURCE


select TC.*, TD.ALARM_COUNT
from NDP_CP_EXCEED_SLA TC,
(
select TA.SOURCE, COUNT(TA.SOURCE) as ALARM_COUNT
from SLEE_ALARM TA, NDP_CP_EXCEED_SLA TB
where
  (TA.SOURCE = TB.SERVICE_PROVIDER_ID)
  and
  ( (TIMESTAMP'1970-01-01 00:00:00 GMT' + NUMTODSINTERVAL(TA.TIMESTAMP/1000, 'SECOND'))
    between
    (TB.LAST_MONITORTING_TIME + NUMTODSINTERVAL(1/1000, 'SECOND'))
    and
    (TIMESTAMP'1970-01-01 00:00:00 GMT' + NUMTODSINTERVAL(1216101354380/1000, 'SECOND'))
  )
group by TA.SOURCE
) TD
where
  (TC.SERVICE_PROVIDER_ID = TD.SOURCE)


select TC.*, 0 as ALARM_COUNT
from NDP_CP_EXCEED_SLA TC
where
   SERVICE_PROVIDER_ID
   not in
   (
    select TA.SOURCE
    from SLEE_ALARM TA, NDP_CP_EXCEED_SLA TB
    where
      (TA.SOURCE = TB.SERVICE_PROVIDER_ID)
      and
      ( (TIMESTAMP'1970-01-01 00:00:00 GMT' + NUMTODSINTERVAL(TA.TIMESTAMP/1000, 'SECOND'))
        between
        (TB.LAST_MONITORTING_TIME + NUMTODSINTERVAL(1/1000, 'SECOND'))
        and
        (TIMESTAMP'1970-01-01 00:00:00 GMT' + NUMTODSINTERVAL(1216101354380/1000, 'SECOND'))
      )
    group by TA.SOURCE
    )


select TC.*, TD.ALARM_COUNT
from NDP_CP_EXCEED_SLA TC,
  (
    select TA.SOURCE, COUNT(TA.SOURCE) as ALARM_COUNT
    from SLEE_ALARM TA, NDP_CP_EXCEED_SLA TB
    where
      (TA.SOURCE = TB.SERVICE_PROVIDER_ID)
      and
      (
        (TIMESTAMP'1970-01-01 00:00:00 GMT' + NUMTODSINTERVAL(TA.TIMESTAMP/1000, 'SECOND'))
        between
        (TB.LAST_MONITORTING_TIME + NUMTODSINTERVAL(1/1000, 'SECOND'))
        and
        (TIMESTAMP'1970-01-01 00:00:00 GMT' + NUMTODSINTERVAL(1216101354380/1000, 'SECOND'))
      )
    group by TA.SOURCE
  ) TD
where
  (TC.SERVICE_PROVIDER_ID = TD.SOURCE)

union

select TD.*, 0 as ALARM_COUNT
from NDP_CP_EXCEED_SLA TD
where
  SERVICE_PROVIDER_ID
  not in
  (
    select SOURCE from
    (
      select TA.SOURCE, COUNT(TA.SOURCE) as ALARM_COUNT
      from SLEE_ALARM TA, NDP_CP_EXCEED_SLA TB
      where
        (TA.SOURCE = TB.SERVICE_PROVIDER_ID)
        and
        (
          (TIMESTAMP'1970-01-01 00:00:00 GMT' + NUMTODSINTERVAL(TA.TIMESTAMP/1000, 'SECOND'))
          between
          (TB.LAST_MONITORTING_TIME + NUMTODSINTERVAL(1/1000, 'SECOND'))
          and
          (TIMESTAMP'1970-01-01 00:00:00 GMT' + NUMTODSINTERVAL(1216101354380/1000, 'SECOND'))
        )
      group by TA.SOURCE
    ) TC
  )


UPDATE
  (SELECT acse.IS_CP_UPDATED, acse.CP_UPDATED_DATE
   FROM ATM_CUSTOMER_SUBS_EVENT acse,
        ATM_CUSTOMER_SUBSCRIPTION acs,
        ATM_ORDER ao
   WHERE (ao.PURCHASE_ID = purchaseid)
         AND (acs.CREATE_TRANSACTION_ID = ao.TRANSACTION_ID)
         AND (acs.CONTENT_PRODUCT_ID = ao.PRODUCT_ID)
         AND (acs.CUSTOMER_ACCOUNT_ID = ao.CUSTOMER_ACCOUNT_ID)
         AND (acse.TRANSACTION_ID = ao.TRANSACTION_ID)
         AND (acse.SUBSCRIPTION_ID = acs.SUBSCRIPTION_ID)
  )
SET IS_CP_UPDATED = 'N',
    CP_UPDATED_DATE = NULL


select * from dba_role_privs;
select * from dba_roles;

SELECT * FROM all_role_privs;

select * from user_application_roles;
select * from session_roles;

select * from role_role_privs;
select * from role_sys_privs;
select * from role_tab_privs
where table_name like 'NDP_IPTV%';

select * from user_role_privs;

select sys_context( 'userenv', 'current_schema' ) from dual;

GRANT SELECT, INSERT, UPDATE, DELETE ON NDP_IPTV_INFO TO R_IN_APPDEV;
REVOKE SELECT, INSERT, UPDATE, DELETE ON NDP_IPTV_INFO FROM R_IN_APPDEV;

GRANT SELECT, INSERT, UPDATE, DELETE ON NDP_IPTV_INFO TO APPDEV_OCSG;
REVOKE SELECT, INSERT, UPDATE, DELETE ON NDP_IPTV_INFO FROM APPDEV_OCSG;

GRANT EXECUTE ON ndp_deli_noti_bc_updateTasks TO R_IN_APPDEV;
REVOKE EXECUTE ON ndp_deli_noti_bc_updateTasks FROM R_IN_APPDEV;

CREATE SYNONYM NDP_IPTV_INFO FOR IN_APPDEV_ADM.NDP_IPTV_INFO;
