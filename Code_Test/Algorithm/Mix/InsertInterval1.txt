================================================================================
https://leetcode.com/problemset/algorithms/
================================================================================
Test
------------------------------------------------------------
Java
Accepted.

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
	public class MyComparator implements Comparator<Interval>
	{
		@Override
		public int compare(Interval o1, Interval o2){
			if (o1.start < o2.start) return -1;
			else if (o1.start > o2.start) return 1;
			else if (o1.end < o2.end) return -1;
			else if (o1.end > o2.end) return 1;
			else return 0;
		}
	}

	public List<Interval> insert_1(List<Interval> intervals, Interval newInterval){
		List<Interval> result = new ArrayList<>();
		Interval temp = null;

		intervals.add(newInterval);
		Collections.sort(intervals, new MyComparator());
		for (Interval interval : intervals) {
			if (temp == null) {
				temp = interval;
			} else {
				if (temp.end < interval.start) {
					result.add(temp);
					temp = interval;
				} else if (temp.end <= interval.end) {
					temp.end = interval.end;
				}
			}
		}

		if (temp != null) {
			result.add(temp);
		}

		return result;
	}
}
================================================================================
Other solutions
------------------------------------------------------------
================================================================================
