================================================================================
https://leetcode.com/problems/first-missing-positive/description/
================================================================================
Test
------------------------------------------------------------
Java
Accepted.

class Solution {
	public int firstMissingPositive(int[] nums){
		int size = nums.length;
		int result = 1;

		// The valid value in the array should be [1, size -1].

		// Reset value to 0 for (, 0] and (size, ).
		for (int i = 0; i < size; i++) {
			if ((nums[i] <= 0) || (nums[i] > size)) {
				nums[i] = 0;
			}
		}

		// Check each element:
		// If its value is not correct element, and not duplicated one, exchange it with correct element.
		// Then continue check exchanged value until no more move.
		for (int i = 0; i < size; i++) {
			int index = nums[i] - 1;
			while ((index >= 0) && (index != i) && (nums[i] != nums[index])) {
				int temp = nums[index];
				nums[index] = nums[i];
				nums[i] = temp;
				index = nums[i] - 1;
			}
		}

		// Reset value to 0 for all duplicated elements, which cannot move to correct place.
		for (int i = 0; i < size; i++) {
			if (nums[i] - 1 != i) nums[i] = 0;
		}

		// Find the max continuous element, which is not 0.
		for (int i = 0; i < size; i++) {
			if (nums[i] == 0) break;
			result++;
		}

		return result;
	}
}
------------------------------------------------------------
Java
Accepted.

class Solution {
	public int firstMissingPositive(int[] nums){
		int size = nums.length;
		int result = 1;

		// The valid value in the array should be [1, size -1].

		// Check each element:
		// If its value is not correct element, and not duplicated one, exchange it with correct element.
		// Then continue check exchanged value until no more move.
		for (int i = 0; i < size; i++) {
			int index = nums[i] - 1;
			while ((index >= 0) && (index < size) && (index != i) && (nums[i] != nums[index])) {
				int temp = nums[index];
				nums[index] = nums[i];
				nums[i] = temp;
				index = nums[i] - 1;
			}
		}

		// Find the max continuous element.
		for (int i = 0; i < size; i++) {
			if (nums[i] - 1 != i) break;
			result++;
		}

		return result;
}
================================================================================
Other solutions
------------------------------------------------------------
================================================================================
