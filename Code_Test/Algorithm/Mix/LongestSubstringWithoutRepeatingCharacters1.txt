================================================================================
https://leetcode.com/problems/longest-substring-without-repeating-characters/description/
================================================================================
Test
------------------------------------------------------------
Java
Accepted.

class Solution {
    public int lengthOfLongestSubstring(String s) {
        ArrayList<Character> tempList = new ArrayList<Character>();
        int start_idx = 0, substr_length = 0;
        int max_idx = 0, max_length = 0;

        for (int i = 0; i < s.length() - max_length; i++) {
            tempList.clear();
            start_idx = i;
            substr_length = 0;

            for (int j = i; j < s.length(); j++) {
                if (!tempList.contains(s.charAt(j))) {
                    tempList.add(s.charAt(j));
                    substr_length++;
                } else
                    break;
            }

            if (substr_length > max_length) {
                max_idx = start_idx;
                max_length = substr_length;
            }
        }

        return max_length;
    }
}
------------------------------------------------------------
Java
Accepted.

class Solution {
    public int lengthOfLongestSubstring(String s) {
        ArrayList<Character> tempList = new ArrayList<Character>();
        int max_length = 0;

        for (int i = 0; i < s.length() - max_length; i++) {
            tempList.clear();

            int j = 0;
            for (j = i; j < s.length(); j++) {
                if (!tempList.contains(s.charAt(j)))
                    tempList.add(s.charAt(j));
                else
                    break;
            }

            max_length = Math.max(max_length, j - i);
        }

        return max_length;
    }
}
================================================================================
Other solutions
------------------------------------------------------------
Java
Accepted.

class Solution {
    public int lengthOfLongestSubstring(String s) {
        Set<Character> temp = new HashSet<Character>();
        int max_length = 0, i = 0, j = 0;

        while ((i < s.length() - max_length) && (j < s.length())) {
            if (!temp.contains(s.charAt(j))) {
                temp.add(s.charAt(j++));
                max_length = Math.max(max_length, j - i);
            } else {
                temp.remove(s.charAt(i++));
            }
        }

        return max_length;
    }
}
------------------------------------------------------------
Java
Accepted.

class Solution {
    public int lengthOfLongestSubstring(String s) {
        Map<Character, Integer> temp = new HashMap<Character, Integer>();
        int max_length = 0, i = 0, j = 0;

        for (j = 0, i = 0; j < s.length(); j++) {
            if (temp.containsKey(s.charAt(j))) {
                i = Math.max(temp.get(s.charAt(j)) + 1, i);
            }
            temp.put(s.charAt(j), j);
            max_length = Math.max(max_length, j - i + 1);
        }

        return max_length;
    }
}
================================================================================
