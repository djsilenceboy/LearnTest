================================================================================
https://leetcode.com/problems/generate-parentheses/description/
================================================================================
Test
------------------------------------------------------------
Python
Accepted.

class Solution:
    def generateParenthesis(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        result = set()
        if n == 0:
            result = [""]
        else:
            for i in range(1, n + 1):
                temp1 = {
                    "(" + x + ")" for x in self.generateParenthesis(i - 1)}
                temp2 = {x for x in self.generateParenthesis(n - i)}
                temp = {x + y for x in temp1 for y in temp2} | {x +
                                                                y for x in temp2 for y in temp1}
                result = result | temp

            result = sorted(list(result))
        return result
================================================================================
Other solutions
------------------------------------------------------------
Python
Working.

class Solution:
    __temp_result = None

    def internalProcess(self, stack, open, close, max):
        if len(stack) == (max * 2):
            self.__temp_result.append(stack)
            return

        if open < max:
            self.internalProcess(stack + "(", open + 1, close, max)
        if close < open:
            self.internalProcess(stack + ")", open, close + 1, max)

    def generateParenthesis(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        self.__temp_result = []
        self.internalProcess("", 0, 0, n)
        return sorted(self.__temp_result)
================================================================================
